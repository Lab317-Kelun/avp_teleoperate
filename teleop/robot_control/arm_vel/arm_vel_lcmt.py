"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class arm_vel_lcmt(object):

    __slots__ = ["vel_x", "vel_y", "height", "yaw_rad", "yaw_deg"]

    __typenames__ = ["double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.vel_x = 0.0
        """ LCM Type: double """
        self.vel_y = 0.0
        """ LCM Type: double """
        self.height = 0.0
        """ LCM Type: double """
        self.yaw_rad = 0.0
        """ LCM Type: double """
        self.yaw_deg = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(arm_vel_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddd", self.vel_x, self.vel_y, self.height, self.yaw_rad, self.yaw_deg))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arm_vel_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arm_vel_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = arm_vel_lcmt()
        self.vel_x, self.vel_y, self.height, self.yaw_rad, self.yaw_deg = struct.unpack(">ddddd", buf.read(40))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if arm_vel_lcmt in parents: return 0
        tmphash = (0x2426ae251661d527) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if arm_vel_lcmt._packed_fingerprint is None:
            arm_vel_lcmt._packed_fingerprint = struct.pack(">Q", arm_vel_lcmt._get_hash_recursive([]))
        return arm_vel_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", arm_vel_lcmt._get_packed_fingerprint())[0]


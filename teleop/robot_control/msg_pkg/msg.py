"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class msg(object):

    __slots__ = ["vel_x", "vel_y", "height", "yaw_rad", "yaw_deg", "kLeftShoulderPitch_q", "kLeftShoulderRoll_q", "kLeftShoulderYaw_q", "kLeftElbow_q", "kLeftWristRoll_q", "kLeftWristPitch_q", "kLeftWristyaw_q", "kLeftShoulderPitch_tau", "kLeftShoulderRoll_tau", "kLeftShoulderYaw_tau", "kLeftElbow_tau", "kLeftWristRoll_tau", "kLeftWristPitch_tau", "kLeftWristyaw_tau", "kRightShoulderPitch_q", "kRightShoulderRoll_q", "kRightShoulderYaw_q", "kRightElbow_q", "kRightWristRoll_q", "kRightWristPitch_q", "kRightWristYaw_q", "kRightShoulderPitch_tau", "kRightShoulderRoll_tau", "kRightShoulderYaw_tau", "kRightElbow_tau", "kRightWristRoll_tau", "kRightWristPitch_tau", "kRightWristYaw_tau"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.vel_x = 0.0
        """ LCM Type: float """
        self.vel_y = 0.0
        """
        前进速度
        LCM Type: float
        """

        self.height = 0.0
        """
        横向速度
        LCM Type: float
        """

        self.yaw_rad = 0.0
        """
        高度
        LCM Type: float
        """

        self.yaw_deg = 0.0
        """
        转向速度(弧度制)
        LCM Type: float
        """

        self.kLeftShoulderPitch_q = 0.0
        """
        转向速度(角度制)
        LCM Type: float
        """

        self.kLeftShoulderRoll_q = 0.0
        """
        左臂各关节角度
        LCM Type: float
        """

        self.kLeftShoulderYaw_q = 0.0
        """ LCM Type: float """
        self.kLeftElbow_q = 0.0
        """ LCM Type: float """
        self.kLeftWristRoll_q = 0.0
        """ LCM Type: float """
        self.kLeftWristPitch_q = 0.0
        """ LCM Type: float """
        self.kLeftWristyaw_q = 0.0
        """ LCM Type: float """
        self.kLeftShoulderPitch_tau = 0.0
        """ LCM Type: float """
        self.kLeftShoulderRoll_tau = 0.0
        """
        左臂各关节力矩
        LCM Type: float
        """

        self.kLeftShoulderYaw_tau = 0.0
        """ LCM Type: float """
        self.kLeftElbow_tau = 0.0
        """ LCM Type: float """
        self.kLeftWristRoll_tau = 0.0
        """ LCM Type: float """
        self.kLeftWristPitch_tau = 0.0
        """ LCM Type: float """
        self.kLeftWristyaw_tau = 0.0
        """ LCM Type: float """
        self.kRightShoulderPitch_q = 0.0
        """ LCM Type: float """
        self.kRightShoulderRoll_q = 0.0
        """
        右臂各关节角度
        LCM Type: float
        """

        self.kRightShoulderYaw_q = 0.0
        """ LCM Type: float """
        self.kRightElbow_q = 0.0
        """ LCM Type: float """
        self.kRightWristRoll_q = 0.0
        """ LCM Type: float """
        self.kRightWristPitch_q = 0.0
        """ LCM Type: float """
        self.kRightWristYaw_q = 0.0
        """ LCM Type: float """
        self.kRightShoulderPitch_tau = 0.0
        """ LCM Type: float """
        self.kRightShoulderRoll_tau = 0.0
        """
        右臂各关节力矩
        LCM Type: float
        """

        self.kRightShoulderYaw_tau = 0.0
        """ LCM Type: float """
        self.kRightElbow_tau = 0.0
        """ LCM Type: float """
        self.kRightWristRoll_tau = 0.0
        """ LCM Type: float """
        self.kRightWristPitch_tau = 0.0
        """ LCM Type: float """
        self.kRightWristYaw_tau = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(msg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffffffffffffffffffffffffffffffff", self.vel_x, self.vel_y, self.height, self.yaw_rad, self.yaw_deg, self.kLeftShoulderPitch_q, self.kLeftShoulderRoll_q, self.kLeftShoulderYaw_q, self.kLeftElbow_q, self.kLeftWristRoll_q, self.kLeftWristPitch_q, self.kLeftWristyaw_q, self.kLeftShoulderPitch_tau, self.kLeftShoulderRoll_tau, self.kLeftShoulderYaw_tau, self.kLeftElbow_tau, self.kLeftWristRoll_tau, self.kLeftWristPitch_tau, self.kLeftWristyaw_tau, self.kRightShoulderPitch_q, self.kRightShoulderRoll_q, self.kRightShoulderYaw_q, self.kRightElbow_q, self.kRightWristRoll_q, self.kRightWristPitch_q, self.kRightWristYaw_q, self.kRightShoulderPitch_tau, self.kRightShoulderRoll_tau, self.kRightShoulderYaw_tau, self.kRightElbow_tau, self.kRightWristRoll_tau, self.kRightWristPitch_tau, self.kRightWristYaw_tau))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != msg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return msg._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = msg()
        self.vel_x, self.vel_y, self.height, self.yaw_rad, self.yaw_deg, self.kLeftShoulderPitch_q, self.kLeftShoulderRoll_q, self.kLeftShoulderYaw_q, self.kLeftElbow_q, self.kLeftWristRoll_q, self.kLeftWristPitch_q, self.kLeftWristyaw_q, self.kLeftShoulderPitch_tau, self.kLeftShoulderRoll_tau, self.kLeftShoulderYaw_tau, self.kLeftElbow_tau, self.kLeftWristRoll_tau, self.kLeftWristPitch_tau, self.kLeftWristyaw_tau, self.kRightShoulderPitch_q, self.kRightShoulderRoll_q, self.kRightShoulderYaw_q, self.kRightElbow_q, self.kRightWristRoll_q, self.kRightWristPitch_q, self.kRightWristYaw_q, self.kRightShoulderPitch_tau, self.kRightShoulderRoll_tau, self.kRightShoulderYaw_tau, self.kRightElbow_tau, self.kRightWristRoll_tau, self.kRightWristPitch_tau, self.kRightWristYaw_tau = struct.unpack(">fffffffffffffffffffffffffffffffff", buf.read(132))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if msg in parents: return 0
        tmphash = (0xb82cc81af3ed3e30) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if msg._packed_fingerprint is None:
            msg._packed_fingerprint = struct.pack(">Q", msg._get_hash_recursive([]))
        return msg._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", msg._get_packed_fingerprint())[0]

